TITLE:: ScNumericControl
summary:: base class for numeric midi controls
categories:: Midi Utils
related:: Classes/ScMsgDispatcher, Classes/ScMidiTextField, Classes/ScMidiKnob, Classes/ScMidiSlider, Classes/ScControlChangeDumper

DESCRIPTION::
Base class for the concrete controls like ScMidiTextField, ScMidiKnob, ScMidiSlider. This class contains everything that is common between different kinds of bidirectional midi controls that hold a single numerical value. Normally you will never instantiate a ScNumericControl directly. It contains no ui controls.



CLASSMETHODS::

METHOD:: new
creates a new ScNumericControl

ARGUMENT:: unique_name
	Every ScNumericControl needs a unique name.
	This name is configured at the time of instantiating the control (typically in the constructor arguments).
	

ARGUMENT:: gui_name
	Every ScNumericControl needs a gui name. This is a name that is shown in the label, if the label is visible.
	Multiple controls may have the same gui name, if desired.
	

ARGUMENT:: msgDispatcher
	The name that is used in the label, if the label is shown.
	Different controls can have the same gui_name, but must have a distinct unique_name.
	

ARGUMENT:: bidirectional
	A boolean that indicates if MIDI will be sent back to the MIDI device. If you set it to false, you can register
	a custom receive handler to e.g. drive a supercollider synth instead.
	

returns:: an ScNumericControl

INSTANCEMETHODS::

METHOD:: uniquename
encapsulates the unique name for this control. unique name is used internally and must be unique over all controls. unique name is passed to the control in the constructor

returns:: a unique name (string)
METHOD:: gui_name
encapsulates the gui name for this control. gui name can be shared with other controls and is used to make a label. gui_name is passed to the control in the constructor.

returns:: a gui name (string)
METHOD:: bidirectional
boolean to indicate if this control will send midi back to the midi device. Set to false if you only want to receive midi (and e.g. do something with it in a custom receive handler).

returns:: a boolean
METHOD:: obschan
encapsulates this control's midi channel. This is initialized during prebinding or during learning.

returns:: a midichannel (Integer)
METHOD:: obstype
	Encapsulates this control's controller type. This is initialized during prebinding or during learning.
	At the moment of writing this can be one of \cc, \bend, \rpn, \nrpn, \log.
	

returns:: a control type
METHOD:: obsspec
	Encapsulates this control's ControlSpec (min value, max value, default value).
	This is initialized during prebinding or during learning.
	

returns:: a ControlSpec
METHOD:: obssrc
	Encapsulates this control's midi src.
	This is initialized during prebinding or during learning.
	

returns:: a midi src (Integer)
METHOD:: obsctrl
	Encapsulates this control's midi controller number.
	This is initialized during prebinding or during learning.
	

returns:: a controller number (or "BEND" or "PROG")
METHOD:: msg_dispatcher
	Encapsulates this control's midi msg dispatcher.
	This is passed to the control in the constructor.
	

returns:: a msgDispatcher, responsible for all midi communication
METHOD:: receive_handler
	Encapsulates this control's custom receive handler.
	This is optionally set up by the end user, using the "registerReceiveHandler" call.
	The custom receive handler must be a function taking 6 arguments.
	These 6 arguments are: 1. msgDispatcher, 2. the ScMidiNumericControl itself, 3. the midi src,
	4. the midi channel, 5. the controller number (for pitch bending this is a string "BEND", for program change this
	is a string "PROG") and 6. the controller value that is received
	

returns:: a function
METHOD:: value_lookup_table
	Encapsulates this control's value_lookup_table. If a value_lookup_table is set up (this is optional), it will be used to translate the midi values into symbolic names which are displayed in the label (if the label is visible). See the bigsky example for an illustration.
	

returns:: an array where index in the array corresponds to midi controller value, and entry in the array corresponds to the corresponding symbolic value
METHOD:: previous_value
	Encapsulates this control's last received value, in case it needs to resend its value at some point.
	

returns:: last received controller value
METHOD:: list_of_presend_coupled_controls
	A list of unique names of other controls in the system that need to send their value before this control can send its value. Example would be having two controls, one for bank number and one for program select. When program select is modified, also bank number has to be sent again.
	

returns:: a list of unique names
METHOD:: list_of_postsend_coupled_controls
	A list of unique names of other controls in the system that need to send their value before this control can send its value. Example would be having two controls, one for bank number and one for program select. When bank number is modified, also program select has to be resent.
	

returns:: a list of unique names
METHOD:: custom_control_action
	An optional action triggered when the user modifies the control in the supercollider UI. Sending control changes to the midi device is handled automatically by the framework and doesn't need any custom control action to be defined. The custom_control_action receives the view (e.g. a knob or a slider) as argument so you can interpret the value.
	

returns:: a function expecting a view argument filled in by the framework
METHOD:: init
Internal method to initialize the class' data members.

ARGUMENT:: unique_name
a unique name (string); this is an ID that must be unique over all sc-midi-controls

ARGUMENT:: gui_name
a name (string) that is used in the label, if that label is shown

ARGUMENT:: msgDispatcher
an ScMsgDispatcher, an object that handles all midi communication

returns:: this instance of ScNumericControl

METHOD:: extractProperties
converts internal state of the control into a dictionary for saving/loading the learned or configured controls

ARGUMENT:: props
an empty IdentityDictionary that can be filled with key/value pairs

returns:: the initialized dictionary
METHOD:: initFromProperties
restores internal state of a control from key/values in an IdentityDictionary

ARGUMENT:: props
an initialized IdentityDictionary from which properties will be read to initialize this control

returns:: the initialized control
METHOD:: send
	Method to send a controller value to a midi device.
	Actually, the send method will first send the values of all controls that are part of the list_of_presend_coupled_controls,
	then send the value of this control, and finally send the values of all controls that are part of the list_of_postsend_coupled controls. These presend and postsend controls can be used when control changes have to be sent together, e.g. when selecting a patch which first requires sending a bank select followed by a program change.
	The actual sending uses the msgDispatcher specified during creation of this control which offers sending values to the midi device as a service. No sending will take place if the control's bidirectional member variable is set to false.
	

ARGUMENT:: val
value to send to the midi device

returns:: this instance of ScNumericControl

METHOD:: sendRaw
	sendRaw will send this control's value to the midi device using the msgDispatcher specified during creation of this control. sendRaw is an internal function, and you are normally expected to use send instead. sendRaw will not send any presend and postsend control changes (see method send).
	

ARGUMENT:: val
value to send

returns:: this instance of ScNumericControl

METHOD:: sendPreviousValue
	sendPreviousValue (re)sends the last value of this control to the midi device.
	Mostly conceived as a helper method for 'send' which calls sendPreviousValue when sending presend/postsend control changes.
	

returns:: this instance of ScNumericControl

METHOD:: makeLabel
	Constructs a label for the control to display in the UI based on gui_name, value, control change type.
	If the control has a value_lookup_table (an array of strings) the value will be used as index in the
	value_lookup_table to show a symbolic value instead of a numerical value. If the value_lookup_table entry
	contains a percentage sign, it will be substituted with the numerical value.
	

ARGUMENT:: val
value to show in the label

returns:: the constructed label (a string)
METHOD:: prebindCc
	Convenience method to bind an sc-midi-control to a midi CC change.
	This is the programmatic way of teaching midi control what messages to listen for/what messages to send.
	When calling one of the prebind methods, the control is added to a collection of observers in the msgDispatcher
	using its unqiue name as key.
	

ARGUMENT:: chan
midi channel

ARGUMENT:: ccnum
controller number

ARGUMENT:: minval
minimum allowed value for the controller value

ARGUMENT:: maxval
maximum allowed value for the controller value

ARGUMENT:: src
midi src (can be left at nil)

returns:: this instance of ScNumericControl

METHOD:: prebindRpn
	Convenience method to bind an sc-midi-control to a midi RPN change.
	This is the programmatic way of teaching midi control what messages to listen for/what messages to send.
	When calling one of the prebind methods, the control is added to a collection of observers in the msgDispatcher
	using its unqiue name as key.
	

ARGUMENT:: chan
midi channel

ARGUMENT:: rpnnum
controller number

ARGUMENT:: minval
minimum allowed value for the controller value (default=0)

ARGUMENT:: maxval
maximum allowed value for the controller value (defaullt=127)

ARGUMENT:: src
midi src (can be left at nil)

returns:: this instance of ScNumericControl

METHOD:: prebindNrpn
	Convenience method to bind an sc-midi-control to a midi NRPN change.
	This is the programmatic way of teaching midi control what messages to listen for/what messages to send.
	When calling one of the prebind methods, the control is added to a collection of observers in the msgDispatcher
	using its unqiue name as key.
	

ARGUMENT:: chan
midi channel

ARGUMENT:: nrpnnum
controller number

ARGUMENT:: minval
minimum allowed value for the controller value (default=0)

ARGUMENT:: maxval
maximum allowed value for the controller value (default=127)

ARGUMENT:: src
midi src (can be left at nil)

returns:: this instance of ScNumericControl

METHOD:: prebindBend
	Convenience method to bind an sc-midi-control to a midi pitchbend change.
	This is the programmatic way of teaching midi control what messages to listen for/what messages to send.
	When calling one of the prebind methods, the control is added to a collection of observers in the msgDispatcher
	using its unqiue name as key.
	

ARGUMENT:: chan
midi channel

ARGUMENT:: minval
minimum allowed value for the controller value (default=0)

ARGUMENT:: maxval
maximum allowed value for the controller value (default=16834)

ARGUMENT:: src
midi src (can be left at nil)

returns:: this instance of ScNumericControl

METHOD:: prebindProgramChange
	Convenience method to bind an sc-midi-control to a midi program change.
	This is the programmatic way of teaching midi control what messages to listen for/what messages to send.
	When calling one of the prebind methods, the control is added to a collection of observers in the msgDispatcher
	using its unqiue name as key.
	

ARGUMENT:: chan
midi channel

ARGUMENT:: minval
minimum allowed value for the controller value (default=0)

ARGUMENT:: maxval
maximum allowed value for the controller value (default=127)

ARGUMENT:: src
midi src (can be left at nil)

returns:: this instance of ScNumericControl

METHOD:: prebindLog
	Convenience method to bind an sc-midi-control to an internal msg type \log.
	This is typically used in ScMidiControlChangeDumper to log midi events to a textview.
	This is the programmatic way of teaching midi control what messages to listen for/what messages to send.
	When calling one of the prebind methods, the control is added to a collection of observers in the msgDispatcher
	using its unqiue name as key.
	

ARGUMENT:: chan
midi channel

ARGUMENT:: src
midi src (can be left at nil)

returns:: this instance of ScNumericControl

METHOD:: registerReceiveHandler
	Method that allows a control to receive a function that will be triggered
	whenever the control receives midi updates from the midi device. This can be useful to perform
	user defined actions.
	

ARGUMENT:: handler
	must be a function that takes 6 arguments which will be filled in by the framework, and which the user can use.
	These 6 arguments are: 1. msgDispatcher, 2. the ScMidiNumericControl itself, 3. the midi src,
	4. the midi channel, 5. the controller number (for pitch bending this is a string "BEND", for program change this
	is a string "PROG") and 6. the controller value that is received
	

returns:: this instance of ScNumericControl

METHOD:: registerCustomControlAction
	Method that allows a custom control action to be registered. Such custom control action will be executed whenever a user modifies the state of a control (e.g. drags a slider or turns a knob).
	

returns:: this instance of ScNumericControl

METHOD:: receivePublic
	A notification that is triggered when a new control change is detected.
	By default, it will execute the registered receive handler (see registerReceiveHandler) if one was configured.
	The arguments of receivePublic are filled in by the framework and can be used in the custom receive handler.
	

ARGUMENT:: dispatcher
an ScMidiDispatcher

ARGUMENT:: control
an ScNumericControl (or one of its subclasses ScMidiKnob, ScMidiSlider, ScMidiTextView, etc)

ARGUMENT:: src
midi src

ARGUMENT:: chan
midi channel

ARGUMENT:: num
controller number, or one of 'BEND'/'PROG'

ARGUMENT:: val
controller value

returns:: the result of the custom receive_handler
METHOD:: receivePrivate
	A notification that is triggered when a new control change is detected.
	This notification is also triggered if the control is muted. You should not override it
	as it is vital to updating the ui state whenever a midi control change is received from the midi device.
	If you want to do some custom processing when receving a control change, use the receivePublic instead, register a
	custom receive handler, or (if you insist) override the receivePublic method.
	

ARGUMENT:: dispatcher
an ScMidiDispatcher

ARGUMENT:: control
an ScNumericControl (or one of its subclasses ScMidiKnob, ScMidiSlider, ScMidiTextView, etc)

ARGUMENT:: src
midi src

ARGUMENT:: chan
midi channel

ARGUMENT:: num
controller number, or one of 'BEND'/'PROG'

ARGUMENT:: val
controller value

returns:: this instance of ScNumericControl

METHOD:: receivePrivateSysex
A notification triggered when sysex is received. Empty base class implementation.

ARGUMENT:: dispatcher
an ScMidiDispatcher

ARGUMENT:: control
the control that received the sysex

ARGUMENT:: src
midi src

ARGUMENT:: data
sysex data as Int8Array

returns:: this instance of ScNumericControl

METHOD:: refreshUI
	method that is called to let controls update their labels - used when there are dependencies between controls (see the bigsky example)
	

returns:: this instance of ScNumericControl


EXAMPLES::

code::
(
   // ScNumericControl is normally not used by the end user.
   // It is a base class for related classes like ScMidiKnob, ScMidiSlider and ScMidiTextField.
)

::
