TITLE:: ScMidiControlChangeDumper
summary:: a midi control change log window
categories:: Midi Utils
related:: Classes/ScMsgDispatcher, Classes/ScMidiTextField, Classes/ScNumericControl, Classes/ScMidiSlider, Classes/ScMidiKnob

DESCRIPTION::
ScMidiControlChangeDumper models a midi control change log window. The log window is filled up when updates are received from the midi device. ScMidiControlChangeDumper is not bidirectional: it only listens for control changes from the midi device but never sends any.



CLASSMETHODS::

METHOD:: new
	New creates a new ScMidiControlChangeDumper
	

ARGUMENT:: unique_name
unique name, a string, must be unique over all bidirectional midi controls in your program

ARGUMENT:: gui_name
gui name, a string, needn't be unique over all bidirectional midi controls in your program - part of label

ARGUMENT:: msgDispatcher
an ScMsgDispatcher, the object that knows all bidirectional midi controls in your program, and that performs midi communication

returns:: a new ScMidiControlChangeDumper

INSTANCEMETHODS::

METHOD:: muted
	On a log window, muted currently has no effect (but it could be changed in the future to stop logging).
	

returns:: a boolean
METHOD:: guiedit
	The TextView() instance that is displayed in the UI. Can be accessed if you want to make your own custom layouts.
	

returns:: a TextView instance
METHOD:: guimutebutton
	A Button that can be used to activate the built-in mute mode for this control.
	

returns:: a Button
METHOD:: guiname
	A name for this control (will be used as part of the label in the UI).
	

returns:: a string
METHOD:: history
	history is a list of strings - this is used to only display the last 10 received control changes.
	It could be made a bit less hardcoded in the future :)
	

returns:: the instance itself

METHOD:: init
	Initializes a new ScMidiControlChangeDumper
	

ARGUMENT:: unique_name
unique name, a string, must be unique over all bidirectional midi controls in your program

ARGUMENT:: gui_name
gui name, a string, needn't be unique over all bidirectional midi controls in your program - part of label

ARGUMENT:: msgDispatcher
an ScMsgDispatcher, the object that knows all bidirectional midi controls in your program, and that performs midi communication

returns:: an initialized ScMidiControlChangeDumper instance
METHOD:: asLayout
	Convenience method that sets up the guiknob, guilabel, guilearnbutton and guimutebutton and returns them into a VLayout
	

ARGUMENT:: show_mute_button
show the mute button under the midi control (default:true)

ARGUMENT:: mute_label
text to display on the mute button (default: "Mute")

returns:: a VLayout containing a text view, and a button (optional)
METHOD:: receivePrivate
	Method that is activated every time a control value change is detected that affects this button.
	receivePrivate is also called when a control is muted so it can still update its state observing the midi device.
	

ARGUMENT:: dispatcher
an ScMsgDispatcher, resonsible for all midi communication

ARGUMENT:: control
a midi control

ARGUMENT:: src
midi source

ARGUMENT:: chan
midi channel

ARGUMENT:: num
controller number

ARGUMENT:: val
controller value

returns:: the instance itself


EXAMPLES::

code::
(
var slider1, slider2, knob1, textfield;
var msgDispatcher;

// create a midi msg dispatcher
// the msg dispatcher is responsible for learning and sending information to from midi device
msgDispatcher = ScMsgDispatcher();
msgDispatcher.connect("Rev2", "Rev2 MIDI 1");

// create some controls, passing in a unique id, a ui label and the midi msg dispatcher as argument
slider1 = ScMidiSlider("SLIDER 1", "slider", msgDispatcher);
// set up the slider to listen to pitch bending msgs on midi channel 0
slider1.prebindBend(0);

// create a second slider
slider2 = ScMidiSlider("SLIDER 2", "slider", msgDispatcher);
// add a custom handler that will be invoked when values are received from the midi device
slider2.registerReceiveHandler({
	| dispatcher, control, src, chan, num, val |
	src.debug(control.uniquename + "src ");
	chan.debug(control.uniquename + "chan");
	num.debug(control.uniquename + "num ");
	val.debug(control.uniquename + "val ");
});

// create a knob
knob1 = ScMidiKnob("KNOB 1", "knob", msgDispatcher);

// create a textfield
textfield = ScMidiTextField("TF", "text", msgDispatcher);

// make a window,
w = Window("Midi fader", Rect(100, 500, 400, 400));
w.layout_(HLayout(
	slider1.asLayout(show_label:false, show_mute_button:false, learn_label:"L"),
	slider2.asLayout,
	knob1.asLayout,
	textfield.asLayout(show_mute_button:false),
	nil));
w.front;

// clean up when clicking ctrl+. (or cmd+.)
CmdPeriod.doOnce({
	msgDispatcher.cleanUp;
	Window.closeAll
});

)

::
