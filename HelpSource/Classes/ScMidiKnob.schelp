TITLE:: ScMidiKnob
summary:: a bidirectional midi knob
categories:: Midi Utils
related:: Classes/ScMsgDispatcher, Classes/ScMidiTextField, Classes/ScNumericControl, Classes/ScMidiSlider, Classes/ScMidiControlChangeDumper

DESCRIPTION::
ScMidiKnob models a bidirectional MIDI knob. The knob updates when updates are received from the midi device. If the knob is modified in the UI, the new values are sent to the midi device.



CLASSMETHODS::

METHOD:: new
	New creates a new ScMidiKnob
	

ARGUMENT:: unique_name
unique name, a string, must be unique over all bidirectional midi controls in your program

ARGUMENT:: gui_name
gui name, a string, needn't be unique over all bidirectional midi controls in your program - part of label

ARGUMENT:: msgDispatcher
an ScMsgDispatcher, the object that knows all bidirectional midi controls in your program, and that performs midi communication

returns:: a new ScMidiKnob

INSTANCEMETHODS::

METHOD:: muted
	A boolean to indicate that the knob is muted. When a knob is muted,
	it doesn't send values to the midi device when the user rotates the knob.
	The knob will still update its displayed value if control changes are received from the midi device though.
	

returns:: a boolean
METHOD:: guiknob
	The Knob() instance that is displayed in the UI. Can be accessed if you want to make your own custom layouts.
	

returns:: a Knob instance
METHOD:: guilabel
	A StaticText instance that is used to display the label.
	

returns:: a StaticText instance
METHOD:: guilearnbutton
	A Button that can be used to activate the built-in midi learning mode for this control.
	

returns:: a Button
METHOD:: guimutebutton
	A Button that can be used to activate the built-in mute mode for this control.
	

returns:: a Button
METHOD:: guiname
	A name for this control (will be used as part of the label in the UI).
	

returns:: a string
METHOD:: init
	Initializes a new ScMidiKnob
	

ARGUMENT:: unique_name
unique name, a string, must be unique over all bidirectional midi controls in your program

ARGUMENT:: gui_name
gui name, a string, needn't be unique over all bidirectional midi controls in your program - part of label

ARGUMENT:: msgDispatcher
an ScMsgDispatcher, the object that knows all bidirectional midi controls in your program, and that performs midi communication

returns:: an initialized ScMidiKnob instance
METHOD:: asLayout
	Convenience method that sets up the guiknob, guilabel, guilearnbutton and guimutebutton and returns them into a VLayout
	

ARGUMENT:: show_label
show the label above the midi control (default: true)

ARGUMENT:: show_learn_button
show the learn button under the midi control (default:true)

ARGUMENT:: show_mute_button
show the mute button under the midi control (default:true)

ARGUMENT:: learn_label
text to display on the learn button (default: "Learn")

ARGUMENT:: mute_label
text to display on the mute button (default: "Mute")

returns:: a VLayout containing a label (optional), a knob, and two buttons (optional)
METHOD:: receivePrivate
	Method that is activated every time a control value change is detected that affects this button.
	receivePrivate is also called when a control is muted so it can still update its state observing the midi device.
	

ARGUMENT:: dispatcher
an ScMsgDispatcher, resonsible for all midi communication

ARGUMENT:: control
a midi control

ARGUMENT:: src
midi source

ARGUMENT:: chan
midi channel

ARGUMENT:: num
controller number

ARGUMENT:: val
controller value

returns:: this instance of ScMidiKnob

METHOD:: refreshUI
	method called when all controls in the system need to reevaluate their labels, e.g. because of dependencies between controls
	

returns:: this instance of ScMidiKnob


EXAMPLES::

code::
(
var slider1, slider2, knob1, textfield;
var msgDispatcher;

// create a midi msg dispatcher
// the msg dispatcher is responsible for learning and sending information to from midi device
msgDispatcher = ScMsgDispatcher();
msgDispatcher.connect("Rev2", "Rev2 MIDI 1");

// create some controls, passing in a unique id, a ui label and the midi msg dispatcher as argument
slider1 = ScMidiSlider("SLIDER 1", "slider", msgDispatcher);
// set up the slider to listen to pitch bending msgs on midi channel 0
slider1.prebindBend(0);

// create a second slider
slider2 = ScMidiSlider("SLIDER 2", "slider", msgDispatcher);
// add a custom handler that will be invoked when values are received from the midi device
slider2.registerReceiveHandler({
	| dispatcher, control, src, chan, num, val |
	src.debug(control.uniquename + "src ");
	chan.debug(control.uniquename + "chan");
	num.debug(control.uniquename + "num ");
	val.debug(control.uniquename + "val ");
});

// create a knob
knob1 = ScMidiKnob("KNOB 1", "knob", msgDispatcher);

// create a textfield
textfield = ScMidiTextField("TF", "text", msgDispatcher);

// make a window,
w = Window("Midi fader", Rect(100, 500, 400, 400));
w.layout_(HLayout(
	slider1.asLayout(show_label:false, show_mute_button:false, learn_label:"L"),
	slider2.asLayout,
	knob1.asLayout,
	textfield.asLayout(show_mute_button:false),
	nil));
w.front;

// clean up when clicking ctrl+. (or cmd+.)
CmdPeriod.doOnce({
	msgDispatcher.cleanUp;
	Window.closeAll
});

)

::
